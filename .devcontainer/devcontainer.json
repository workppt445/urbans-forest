import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import random
import os
from PIL import Image

st.set_page_config(
    page_title="Fun Urban Forest Explorer",
    page_icon="ðŸŒ³",
    layout="wide",
    initial_sidebar_state="collapsed"
)

@st.cache_data
def load_data(path="trees-with-species-and-dimensions-urban-forest.xlsx"):
    df = pd.read_excel(path, sheet_name=0)
    df.columns = df.columns.str.strip()
    return df

data = load_data()

def random_color():
    return f'rgb({random.randint(50,200)},{random.randint(100,255)},{random.randint(50,200)})'

# Theme toggle
theme = st.sidebar.radio("Theme:", ["Light","Dark"], index=0)
if theme == "Dark":
    st.markdown("<style>body{background-color:#111; color:#eee;}</style>", unsafe_allow_html=True)

# Header with icon
col1, col2 = st.columns([4,1])
with col1:
    st.title("ðŸŒ³ Fun Urban Forest Explorer")
    st.markdown("Explore Melbourne's urban trees with filters, maps, and stats. Enter the secret pin for surprises!")
with col2:
    if os.path.exists('forest_icon.png'):
        st.image(Image.open('forest_icon.png'), width=64)

# Sidebar controls
with st.sidebar.expander("Filters & Secret Pin", expanded=True):
    species = sorted(data['Common Name'].dropna().unique())
    search = st.text_input("Search species:")
    options = [s for s in species if search.lower() in s.lower()]
    selected_species = st.multiselect("Select Species", options, default=options[:5])

    years = sorted(data['Year Planted'].dropna().astype(int).unique())
    y_min, y_max = st.select_slider("Planting Year Range", options=years, value=(years[0], years[-1]))

    pin = st.text_input("ðŸ”’ Secret Pin", type="password")
    if pin:
        if pin == '7477': st.balloons(); st.success("Secret Unlocked!")
        else: st.error("Incorrect Pin")

# Filter data
df = data[
    data['Common Name'].isin(selected_species) &
    data['Year Planted'].between(y_min, y_max)
].reset_index(drop=True)

# Tabs
tab1, tab2, tab3, tab4 = st.tabs(["Overview","Chart","Map","Data"])

with tab1:
    total = len(df)
    species_count = df['Common Name'].nunique()
    avg_per = total/species_count if species_count else 0
    c1, c2, c3 = st.columns(3)
    c1.metric("Total Trees", total)
    c2.metric("Unique Species", species_count)
    c3.metric("Avg per Species", f"{avg_per:.1f}")

with tab2:
    counts = df['Common Name'].value_counts().reset_index()
    counts.columns = ['Common Name','Count']
    counts['Percent'] = (counts['Count']/total*100).round(1)
    colors = [random_color() for _ in counts.index]
    chart_type = st.selectbox("Chart Type", ["Bar","Pie","Line"], key="ct2")
    if chart_type == 'Bar':
        fig = px.bar(counts, x='Common Name', y='Count', text='Percent', title="Species Distribution")
        fig.update_traces(marker_color=colors, texttemplate='%{text}%')
    elif chart_type == 'Pie':
        fig = px.pie(counts, names='Common Name', values='Count', hole=0.3, title="Species Share", color_discrete_sequence=colors)
    else:
        fig = px.line(counts, x='Common Name', y='Count', markers=True, title="Trend by Species")
    st.plotly_chart(fig, use_container_width=True)

with tab3:
    if {'Latitude','Longitude'}.issubset(df.columns):
        map_data = df.dropna(subset=['Latitude','Longitude'])
        fig_map = px.scatter_mapbox(map_data, lat='Latitude', lon='Longitude', hover_name='Common Name', 
                                    zoom=11, height=500, color='Common Name', size_max=10)
        fig_map.update_layout(mapbox_style='open-street-map', margin=dict(l=0,r=0,t=0,b=0))
        st.plotly_chart(fig_map, use_container_width=True)
    else:
        st.warning("No coordinate data.")

with tab4:
    st.dataframe(df, use_container_width=True)

# Download
generated_csv = df.to_csv(index=False)
st.download_button("Download CSV", generated_csv, "trees_filtered.csv")

st.caption("*Built with Streamlit & Plotly* ðŸŒ¿")
